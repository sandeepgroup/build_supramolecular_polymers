--- /tmp/global_best.py	2023-03-19 17:14:36.484135326 +0530
+++ /home/sandeep/Software/anaconda3/lib/python3.7/site-packages/pyswarms/single/global_best.py	2023-03-19 17:22:07.042520351 +0530
@@ -203,6 +203,8 @@
 
         self.swarm.pbest_cost = np.full(self.swarm_size[0], np.inf)
         ftol_history = deque(maxlen=self.ftol_iter)
+        cost_history=[]
+        pos_history=[]
         for i in self.rep.pbar(iters, self.name) if verbose else range(iters):
             # Compute cost for current position and personal best
             # fmt: off
@@ -213,7 +215,7 @@
             self.swarm.best_pos, self.swarm.best_cost = self.top.compute_gbest(self.swarm)
             # fmt: on
             if verbose:
-                self.rep.hook(best_cost=self.swarm.best_cost)
+                self.rep.hook(best_cost=str(self.swarm.best_cost))
             # Save to history
             hist = self.ToHistory(
                 best_cost=self.swarm.best_cost,
@@ -222,12 +224,14 @@
                 position=self.swarm.position,
                 velocity=self.swarm.velocity,
             )
+            cost_history.append(self.swarm.best_cost)
+            pos_history.append(self.swarm.best_pos.tolist())
             self._populate_history(hist)
             # Verify stop criteria based on the relative acceptable cost ftol
             relative_measure = self.ftol * (1 + np.abs(best_cost_yet_found))
             delta = (
                 np.abs(self.swarm.best_cost - best_cost_yet_found)
-                < relative_measure
+                < self.ftol
             )
             if i < self.ftol_iter:
                 ftol_history.append(delta)
